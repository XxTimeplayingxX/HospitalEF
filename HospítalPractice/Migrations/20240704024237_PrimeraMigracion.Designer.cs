// <auto-generated />
using System;
using HospítalPractice.DATA;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospítalPractice.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20240704024237_PrimeraMigracion")]
    partial class PrimeraMigracion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HospítalPractice.MODELS.CitaMedicaDiagnostico", b =>
                {
                    b.Property<int>("IdCitaMedicaDiagnostico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCitaMedicaDiagnostico"));

                    b.Property<int>("CitaMedicoId")
                        .HasColumnType("int");

                    b.Property<int>("DiagnosticoIdDiagnostico")
                        .HasColumnType("int");

                    b.Property<int>("IdCitaMedica")
                        .HasColumnType("int");

                    b.Property<int>("IdDiagnostico")
                        .HasColumnType("int");

                    b.HasKey("IdCitaMedicaDiagnostico");

                    b.HasIndex("CitaMedicoId");

                    b.HasIndex("DiagnosticoIdDiagnostico");

                    b.ToTable("CitaMedicaDiagnosticos");
                });

            modelBuilder.Entity("HospítalPractice.MODELS.CitaMedico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Diagnostico_id")
                        .HasColumnType("int");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("Medico_Id")
                        .HasColumnType("int");

                    b.Property<int>("Receta_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Diagnostico_id");

                    b.HasIndex("Medico_Id");

                    b.HasIndex("Receta_id");

                    b.ToTable("CitaMedicos");
                });

            modelBuilder.Entity("HospítalPractice.MODELS.DetalleReceta", b =>
                {
                    b.Property<int>("Id_DetalleReceta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_DetalleReceta"));

                    b.Property<string>("Dosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duracion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frecuencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instrucciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecetaId_Receta")
                        .HasColumnType("int");

                    b.Property<int>("Receta_id")
                        .HasColumnType("int");

                    b.HasKey("Id_DetalleReceta");

                    b.HasIndex("RecetaId_Receta");

                    b.ToTable("DetalleRecetas");
                });

            modelBuilder.Entity("HospítalPractice.MODELS.Diagnostico", b =>
                {
                    b.Property<int>("IdDiagnostico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDiagnostico"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Recomendaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Severidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDiagnostico");

                    b.ToTable("Diagnosticos");
                });

            modelBuilder.Entity("HospítalPractice.MODELS.Medico", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<int>("Persona_Id")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PersonaId");

                    b.ToTable("Meidco");
                });

            modelBuilder.Entity("HospítalPractice.MODELS.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HistorialMedico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<int>("Persona_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("HospítalPractice.MODELS.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Personas");
                });

            modelBuilder.Entity("HospítalPractice.MODELS.Receta", b =>
                {
                    b.Property<int>("Id_Receta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Receta"));

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime2");

                    b.HasKey("Id_Receta");

                    b.ToTable("Recetas");
                });

            modelBuilder.Entity("HospítalPractice.MODELS.SignosVitales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FrecuenciaCardiaca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("Paciente_id")
                        .HasColumnType("int");

                    b.Property<string>("Pulso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Temperatura")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("SignosVitales");
                });

            modelBuilder.Entity("HospítalPractice.MODELS.CitaMedicaDiagnostico", b =>
                {
                    b.HasOne("HospítalPractice.MODELS.CitaMedico", "CitaMedico")
                        .WithMany()
                        .HasForeignKey("CitaMedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospítalPractice.MODELS.Diagnostico", "Diagnostico")
                        .WithMany()
                        .HasForeignKey("DiagnosticoIdDiagnostico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CitaMedico");

                    b.Navigation("Diagnostico");
                });

            modelBuilder.Entity("HospítalPractice.MODELS.CitaMedico", b =>
                {
                    b.HasOne("HospítalPractice.MODELS.Diagnostico", "Diagnostico")
                        .WithMany()
                        .HasForeignKey("Diagnostico_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospítalPractice.MODELS.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("Medico_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospítalPractice.MODELS.Receta", "Receta")
                        .WithMany()
                        .HasForeignKey("Receta_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Diagnostico");

                    b.Navigation("Medico");

                    b.Navigation("Receta");
                });

            modelBuilder.Entity("HospítalPractice.MODELS.DetalleReceta", b =>
                {
                    b.HasOne("HospítalPractice.MODELS.Receta", "Receta")
                        .WithMany()
                        .HasForeignKey("RecetaId_Receta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receta");
                });

            modelBuilder.Entity("HospítalPractice.MODELS.Medico", b =>
                {
                    b.HasOne("HospítalPractice.MODELS.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("HospítalPractice.MODELS.Paciente", b =>
                {
                    b.HasOne("HospítalPractice.MODELS.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("HospítalPractice.MODELS.SignosVitales", b =>
                {
                    b.HasOne("HospítalPractice.MODELS.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });
#pragma warning restore 612, 618
        }
    }
}
